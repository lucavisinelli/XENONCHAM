
#------Experiments to test (separated with commas)-----

data.experiments=['XENON1T']

#------ Settings for the over-sampling.
# The first element will always be set to 1, for it is the sampling of the
# cosmological parameters. The other numbers describe the over sampling of the
# nuisance parameter space. This array must have the same dimension as the
# number of blocks in your run (so, 1 for cosmological parameters, and then 1
# for each experiment with varying nuisance parameters).
# Note that when using Planck likelihoods, you definitely want to use [1, 4],
# to oversample as much as possible the 14 nuisance parameters.
# Remember to order manually the experiments from slowest to fastest (putting
# Planck as the first set of experiments should be a safe bet, except if you
# also have LSS experiments).
# If you have experiments without nuisance, you do not need to specify an
# additional entry in the over_sampling list (notice for instance that, out of
# the three Planck likelihoods used, only Planck_highl requires nuisance
# parameters, therefore over_sampling has a length of two (cosmology, plus one
# set of nuisance).
#data.over_sampling=[1, 4]

#------ Parameter list -------

# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to None
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'. You should put the derived
# parameters at the end, and in case you are using the `-j fast` Cholesky
# decomposition, you should order your nuisance parameters from slowest to
# fastest.

# Cosmological parameters list
#data.parameters['omega_b']      = [  2.218, None, None,  0.015, 0.01, 'cosmo']
#data.parameters['omega_cdm']    = [ 0.1205, None, None, 0.0014,    1, 'cosmo']
#data.parameters['100*theta_s']  = [1.04146, None, None,0.00031,    1, 'cosmo']
#data.parameters['ln10^{10}A_s'] = [  3.056, None, None,  0.018,    1, 'cosmo']
#data.parameters['n_s']          = [ 0.9619, None, None, 0.0045,    1, 'cosmo']
#data.parameters['M_tot']        = [   0.06,  0.0, None,   0.03,    1, 'cosmo']
#data.parameters['z_reio']	= [   8.24,  0.0, None,   0.88,    1, 'cosmo']
#data.parameters['tau_reio']	= [ 0.0596, 0.04, None, 0.0089,    1, 'cosmo'] 

# Nuisance parameter list, same call, except the name does not have to be a class name
data.parameters['ge']     = [2.0, 0.0, 3.0, 0.0, 1, 'nuisance']
data.parameters['gg']     = [10.0, 0.0, 11.0, 0.1, 1, 'nuisance']
data.parameters['logMe']     = [3.67, 0.0, 25.0, 0.1, 1, 'nuisance']
data.parameters['logMg']     = [0.0, 0.0, 25.0, 0.0, 1, 'nuisance']
data.parameters['gc']     = [-3.0, -20.0, 25.0, 0.0, 1, 'nuisance']
data.parameters['ncham']     = [1.0, 0.0, 5.0, 0.0, 1, 'nuisance']

# Derived parameters
#data.parameters['tau_reio']          = [1, None, None, 0,     1,   'derived']

# Other cosmo parameters (fixed parameters, precision parameters, etc.)

#data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'
data.cosmo_arguments['k_pivot'] = 0.05

# Include non-linear corrections from halofit
data.cosmo_arguments['non linear'] = 'halofit'

# The base model features three massive neutrinos
# The settings below ensures that Neff=3.046
# and m/omega = 93.14 eV
#data.cosmo_arguments['N_ur'] = 0.00641
#data.cosmo_arguments['N_ncdm'] = 1
#data.cosmo_arguments['deg_ncdm'] = 3
#data.cosmo_arguments['m_ncdm'] = 0.02
#data.cosmo_arguments['T_ncdm'] = 0.71611

# Ensure the same precision of P(k) for lensing and pk
data.cosmo_arguments['output'] = 'mPk'
#data.cosmo_arguments['z_max_pk'] = 6.5
#data.cosmo_arguments['P_k_max_1/Mpc'] = 40.0

#------ Mcmc parameters ----

data.N=10
data.write_step=5
